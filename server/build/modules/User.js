"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Password = _interopRequireDefault(require("./Password"));

var _Rooms = _interopRequireDefault(require("./Rooms"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var User =
/*#__PURE__*/
function () {
  function User() {
    var _this = this;

    _classCallCheck(this, User);

    _defineProperty(this, "connect", function (io, socket) {
      socket.on('password', function (data) {
        console.log('hello', data.key);
        var code = data.key;

        if (_Password.default.activePasswordObj[code]) {
          var roomNameData = _Password.default.activePasswordObj[code];
          var parts = roomNameData.split('_', 2);
          var roomId = parts[0];
          var userId = parts[1];

          _this.getRoomInstance(roomId);

          socket.username = userId;
          socket.room = roomId;
          socket.code = code;
          socket.join(roomId);
          io.to(roomId).emit('connectToRoom', {
            roomId: roomId,
            userId: userId,
            password: code
          });
          _this.roomInstance.users[userId] = {
            socketId: socket.id,
            phoneDataObject: _this.phoneDataObject
          };
          console.log("Instance de la room après connexion : ", _this.roomInstance);
          console.log("Nombre d'utilisateur : ", Object.keys(_this.roomInstance.users).length); // All clients connected to room

          if (Object.keys(_this.roomInstance.users).length === 3) {
            var phoneData = [];

            for (var user in _this.roomInstance.users) {
              var userInstance = _this.roomInstance.users[user];

              if (user === "player1" || user === "player2") {
                phoneData.push({
                  userId: user,
                  phoneData: userInstance.phoneDataObject
                });
              }
            }

            io.to(socket.room).emit('phoneData', phoneData);
          } // Emit phone data after connexion
          // io.to(socket.room).emit('phoneData', {
          //     phoneData: this.phoneDataObject,
          //     userId: socket.username
          // })


          delete _Password.default.activePasswordObj[code];
        } else {
          console.log('mdp nom définit');
          socket.emit('connectToRoom', "Une erreur s'est produite");
        }
      });
    });

    _defineProperty(this, "reconnect", function (io, socket) {
      socket.on('reco', function (data) {
        console.log("on sendCookie", data);
        socket.username = data.userId;
        socket.room = data.roomId;
        io.in(data.roomId).clients(function (err, clients) {
          console.log(clients);
          var size = Object.keys(clients).length;
          console.log(size);

          if (size > 1) {
            socket.join(data.roomId);
            io.to(data.roomId).emit('connectToRoom', {
              roomId: data.roomId,
              userId: data.userId
            }); // io.to(data.roomId).emit('connectToRoom', {
            //     roomId: data.roomId,
            //     userId: data.userId
            // })
          }
        });
      });
    });

    _defineProperty(this, "disconnect", function (io, socket) {
      socket.on('disconnect', function () {
        var code = socket.code; // console.log(code) 

        _Password.default.activePasswordObj[code] = "".concat(socket.room, "_").concat(socket.username);

        _Password.default.passwordArr.push(code);

        io.to(socket.room).emit('disconnectToRoom', {
          roomId: socket.room,
          userId: socket.username
        });
        console.log("user ".concat(socket.username, " mobile disconnected"));
      });
    });

    _defineProperty(this, "phoneData", function (io, socket) {
      socket.on('phoneData', function (data) {
        _this.phoneDataObject = data.phoneData;
      });
    });

    _defineProperty(this, "showDanger", function (io, socket) {
      socket.on('showDanger', function (data) {
        io.to(_this.roomInstance.users[data.userId].socketId).emit('showDanger', {
          showDanger: data.showDanger
        });
      });
    });

    _defineProperty(this, "position", function (io, socket) {
      socket.on('position', function (data) {
        io.to(socket.room).emit('position', {
          position: data.position,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "lightOn", function (io, socket) {
      socket.on('isLightOn', function (data) {
        io.to(socket.room).emit('isLightOn', {
          isLightOn: data.isLightOn,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "slider", function (io, socket) {
      socket.on('sliderValue', function (data) {
        io.to(socket.room).emit('sliderValue', {
          sliderValue: data.sliderValue,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "tap", function (io, socket) {
      socket.on('tapValue', function (data) {
        io.to(socket.room).emit('tapValue', {
          tapValue: data.tapValue,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "introProgression", function (io, socket) {
      socket.on('introProgression', function (data) {
        io.to(socket.room).emit('introProgression', {
          progression: data.progression,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "fingerprint", function (io, socket) {
      socket.on('fingerprint', function () {
        io.to(socket.room).emit('fingerprint', {
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "code", function (io, socket) {
      socket.on('code', function (data) {
        io.to(socket.room).emit('code', {
          code: data.code,
          userId: socket.username
        });
      });
    });

    _defineProperty(this, "handle", function (io, socket) {
      socket.on('handle', function (data) {
        io.to(socket.room).emit('handle', {
          handle: data.handle,
          userId: socket.username
        });
      });
    });

    this.phoneDataObject = {};
  }

  _createClass(User, [{
    key: "getRoomInstance",
    value: function getRoomInstance(roomId) {
      var parts = roomId.split('-', 2);
      var roomIndex = parseInt(parts[1]);
      this.roomInstance = _Rooms.default.roomArrInstance[roomIndex - 1];
    }
  }, {
    key: "sendUserId",
    value: function sendUserId(io, userId, roomId) {
      var parts = roomId.split('-', 2);
      var roomIndex = parseInt(parts[1]);
      console.log('parts', roomIndex);
      console.log(_Rooms.default.roomArrId);
      var roomSocketId = _Rooms.default.roomArrId[roomIndex - 1];
      console.log('la room actuelle est :', roomId, "et sa room socketID : ", roomSocketId); // socket.broadcast.to(roomSocketId).emit('bra', userId)

      io.to("".concat(roomSocketId)).emit('tes', 'I just met you');
    }
  }]);

  return User;
}();

exports.default = User;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,