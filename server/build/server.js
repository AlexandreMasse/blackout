"use strict";

var _Room = _interopRequireDefault(require("./modules/Room"));

var _Rooms = _interopRequireDefault(require("./modules/Rooms"));

var _User = _interopRequireDefault(require("./modules/User"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var express = require('express');

var bodyParser = require('body-parser');

var path = require('path');

var app = express();

var server = require('http').createServer(app);

var io = require('socket.io')(server, {
  wsEngine: 'ws'
});

app.set('port', process.env.PORT || 8888);
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
})); // if (process.env.NODE_ENV === 'production') {
//   // Serve any static files
//   app.use(express.static(path.join(__dirname, 'client/build')));
//   // Handle React routing, return all requests to React app
//   app.get('*', function(req, res) {
//     res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
//   })
// }

server.listen(app.get('port'), function () {
  console.log('----- SERVER STARTED -----'); // rooms.init()
  // console.log()

  io.sockets.on('connection', function response(socket) {
    // Check device type 
    socket.on('deviceType', function (data) {
      if (data.type === 'desktop') {
        var room = new _Room.default(socket);
        room.create(socket);

        _Rooms.default.roomArrInstance.push(room);

        room.currentStep(io, socket);
        room.showDanger(io, socket);
        room.userCurrentStep(io, socket);
        room.destroy(io, socket);
      }

      if (data.type === 'mobile') {
        var user = new _User.default();
        user.connect(io, socket);
        user.reconnect(io, socket);
        user.disconnect(io, socket);
        user.showDanger(io, socket);
        user.position(io, socket);
        user.lightOn(io, socket);
        user.slider(io, socket);
        user.tap(io, socket);
        user.phoneData(io, socket);
        user.introProgression(io, socket);
        user.fingerprint(io, socket);
        user.code(io, socket);
        user.handle(io, socket);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJwYXRoIiwiYXBwIiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwiaW8iLCJ3c0VuZ2luZSIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImxpc3RlbiIsImdldCIsImNvbnNvbGUiLCJsb2ciLCJzb2NrZXRzIiwib24iLCJyZXNwb25zZSIsInNvY2tldCIsImRhdGEiLCJ0eXBlIiwicm9vbSIsIlJvb20iLCJjcmVhdGUiLCJSb29tcyIsInJvb21BcnJJbnN0YW5jZSIsInB1c2giLCJjdXJyZW50U3RlcCIsInNob3dEYW5nZXIiLCJ1c2VyQ3VycmVudFN0ZXAiLCJkZXN0cm95IiwidXNlciIsIlVzZXIiLCJjb25uZWN0IiwicmVjb25uZWN0IiwiZGlzY29ubmVjdCIsInBvc2l0aW9uIiwibGlnaHRPbiIsInNsaWRlciIsInRhcCIsInBob25lRGF0YSIsImludHJvUHJvZ3Jlc3Npb24iLCJmaW5nZXJwcmludCIsImNvZGUiLCJoYW5kbGUiXSwibWFwcGluZ3MiOiI7O0FBS0E7O0FBQ0E7O0FBQ0E7Ozs7QUFQQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLElBQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNRyxHQUFHLEdBQUdKLE9BQU8sRUFBbkI7O0FBQ0EsSUFBSUssTUFBTSxHQUFHSixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCSyxZQUFoQixDQUE2QkYsR0FBN0IsQ0FBYjs7QUFJQSxJQUFJRyxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxXQUFELENBQVAsQ0FBcUJJLE1BQXJCLEVBQTZCO0FBQUVHLEVBQUFBLFFBQVEsRUFBRTtBQUFa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bnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbnZhciBzZXJ2ZXIgPSByZXF1aXJlKCdodHRwJykuY3JlYXRlU2VydmVyKGFwcClcbmltcG9ydCBSb29tIGZyb20gJy4vbW9kdWxlcy9Sb29tJ1xuaW1wb3J0IFJvb21zIGZyb20gJy4vbW9kdWxlcy9Sb29tcydcbmltcG9ydCBVc2VyIGZyb20gJy4vbW9kdWxlcy9Vc2VyJ1xudmFyIGlvID0gcmVxdWlyZSgnc29ja2V0LmlvJykoc2VydmVyLCB7IHdzRW5naW5lOiAnd3MnIH0pXG5hcHAuc2V0KCdwb3J0JywgcHJvY2Vzcy5lbnYuUE9SVCB8fCA4ODg4KTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxuXG4vLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuLy8gICAvLyBTZXJ2ZSBhbnkgc3RhdGljIGZpbGVzXG4vLyAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NsaWVudC9idWlsZCcpKSk7XG4vLyAgIC8vIEhhbmRsZSBSZWFjdCByb3V0aW5nLCByZXR1cm4gYWxsIHJlcXVlc3RzIHRvIFJlYWN0IGFwcFxuLy8gICBhcHAuZ2V0KCcqJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbi8vICAgICByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NsaWVudC9idWlsZCcsICdpbmRleC5odG1sJykpO1xuLy8gICB9KVxuLy8gfVxuXG5zZXJ2ZXIubGlzdGVuKGFwcC5nZXQoJ3BvcnQnKSwgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZygnLS0tLS0gU0VSVkVSIFNUQVJURUQgLS0tLS0nKSAgIFxuXG4gIC8vIHJvb21zLmluaXQoKVxuICAvLyBjb25zb2xlLmxvZygpXG5cbiAgaW8uc29ja2V0cy5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uIHJlc3BvbnNlKHNvY2tldCkge1xuICAgIC8vIENoZWNrIGRldmljZSB0eXBlIFxuICAgIHNvY2tldC5vbignZGV2aWNlVHlwZScsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdkZXNrdG9wJykge1xuICAgICAgICAgIGNvbnN0IHJvb20gPSBuZXcgUm9vbShzb2NrZXQpIFxuICAgICAgICAgIHJvb20uY3JlYXRlKHNvY2tldClcbiAgICAgICAgICBSb29tcy5yb29tQXJySW5zdGFuY2UucHVzaChyb29tKVxuICAgICAgICAgIHJvb20uY3VycmVudFN0ZXAoaW8sIHNvY2tldClcbiAgICAgICAgICByb29tLnNob3dEYW5nZXIoaW8sIHNvY2tldClcbiAgICAgICAgICByb29tLnVzZXJDdXJyZW50U3RlcChpbywgc29ja2V0KVxuICAgICAgICAgIHJvb20uZGVzdHJveShpbyAsc29ja2V0KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnbW9iaWxlJykge1xuICAgICAgICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcigpXG4gICAgICAgICAgdXNlci5jb25uZWN0KGlvLCBzb2NrZXQpXG4gICAgICAgICAgdXNlci5yZWNvbm5lY3QoaW8sIHNvY2tldClcbiAgICAgICAgICB1c2VyLmRpc2Nvbm5lY3QoaW8sIHNvY2tldClcbiAgICAgICAgICB1c2VyLnNob3dEYW5nZXIoaW8sIHNvY2tldClcbiAgICAgICAgICB1c2VyLnBvc2l0aW9uKGlvLCBzb2NrZXQpXG4gICAgICAgICAgdXNlci5saWdodE9uKGlvLCBzb2NrZXQpXG4gICAgICAgICAgdXNlci5zbGlkZXIoaW8sIHNvY2tldClcbiAgICAgICAgICB1c2VyLnRhcChpbywgc29ja2V0KVxuICAgICAgICAgIHVzZXIucGhvbmVEYXRhKGlvLCBzb2NrZXQpXG4gICAgICAgICAgdXNlci5pbnRyb1Byb2dyZXNzaW9uKGlvLCBzb2NrZXQpXG4gICAgICAgICAgdXNlci5maW5nZXJwcmludChpbywgc29ja2V0KVxuICAgICAgICAgIHVzZXIuY29kZShpbywgc29ja2V0KVxuICAgICAgICAgIHVzZXIuaGFuZGxlKGlvLCBzb2NrZXQpXG4gICAgICAgIH1cbiAgICB9KVxuICB9KVxufSlcbiJdfQ==